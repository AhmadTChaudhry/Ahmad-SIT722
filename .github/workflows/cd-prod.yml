name: CD - Stage 3 (Production)
on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  PROD_NAMESPACE: ${{ vars.PROD_NAMESPACE }}

jobs:
  build-and-deploy-prod:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: Build and push main images
        run: |
          docker build -t $REGISTRY/customer_service:main-latest ./backend/customer_service
          docker build -t $REGISTRY/order_service:main-latest    ./backend/order_service
          docker build -t $REGISTRY/product_service:main-latest  ./backend/product_service
          docker build -t $REGISTRY/frontend:main-latest         ./frontend
          docker push $REGISTRY/customer_service:main-latest
          docker push $REGISTRY/order_service:main-latest
          docker push $REGISTRY/product_service:main-latest
          docker push $REGISTRY/frontend:main-latest

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ vars.AKS_CLUSTER_NAME }}

      - name: Create prod namespace if needed
        run: |
          kubectl get ns $PROD_NAMESPACE || kubectl create ns $PROD_NAMESPACE

      - name: Create ACR imagePullSecret in prod namespace
        env:
          REG: ${{ env.REGISTRY }}
          SP_APP_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          SP_PASSWORD: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl -n "$PROD_NAMESPACE" create secret docker-registry acr-cred \
            --docker-server="$REG" \
            --docker-username="$SP_APP_ID" \
            --docker-password="$SP_PASSWORD" \
            --docker-email="devnull@example.com" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Patch default ServiceAccount in prod to use imagePullSecret
        run: |
          kubectl -n "$PROD_NAMESPACE" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-cred"}]}' || true

      - name: Apply manifests to prod
        working-directory: k8s
        run: |
          kubectl -n $PROD_NAMESPACE apply -f configmaps.yaml
          kubectl -n $PROD_NAMESPACE apply -f secrets.yaml
          kubectl -n $PROD_NAMESPACE apply -f rabbitmq.yaml
          kubectl -n $PROD_NAMESPACE apply -f product-db.yaml
          kubectl -n $PROD_NAMESPACE apply -f order-db.yaml
          kubectl -n $PROD_NAMESPACE apply -f customer-db.yaml
          kubectl -n $PROD_NAMESPACE apply -f product-service.yaml
          kubectl -n $PROD_NAMESPACE apply -f order-service.yaml
          kubectl -n $PROD_NAMESPACE apply -f customer-service.yaml
          kubectl -n $PROD_NAMESPACE apply -f frontend.yaml || true

      - name: Pin images to main-latest
        run: |
          kubectl -n $PROD_NAMESPACE set image deployment/product-service-w10-aks \
            product-service-container=$REGISTRY/product_service:main-latest
          kubectl -n $PROD_NAMESPACE set image deployment/order-service-w10-aks \
            order-service-container=$REGISTRY/order_service:main-latest
          kubectl -n $PROD_NAMESPACE set image deployment/customer-service-w10-aks \
            customer-service-container=$REGISTRY/customer_service:main-latest
          kubectl -n $PROD_NAMESPACE set image deployment/frontend-w10-aks \
            frontend-container=$REGISTRY/frontend:main-latest || true

      - name: Wait for rollouts
        run: |
          kubectl -n $PROD_NAMESPACE rollout status deployment/product-service-w10-aks --timeout=600s
          kubectl -n $PROD_NAMESPACE rollout status deployment/order-service-w10-aks --timeout=600s
          kubectl -n $PROD_NAMESPACE rollout status deployment/customer-service-w10-aks --timeout=600s
          kubectl -n $PROD_NAMESPACE rollout status deployment/frontend-w10-aks --timeout=600s || true