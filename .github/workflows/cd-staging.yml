name: CD - Stage 2 (Staging)
on:
  workflow_run:
    workflows: [ "CI - Stage 1 (testing branch)" ]
    types: [ "completed" ]
    branches: [ "testing" ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  # Ephemeral namespace per run (safe for concurrent runs)
  STAGING_NAMESPACE: staging-${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  deploy-staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ vars.AKS_CLUSTER_NAME }}

      - name: Create staging namespace
        run: |
          kubectl create ns $STAGING_NAMESPACE

      - name: Apply k8s manifests to staging
        working-directory: k8s
        run: |
          kubectl -n $STAGING_NAMESPACE apply -f configmaps.yaml
          kubectl -n $STAGING_NAMESPACE apply -f secrets.yaml
          kubectl -n $STAGING_NAMESPACE apply -f rabbitmq.yaml
          kubectl -n $STAGING_NAMESPACE apply -f product-db.yaml
          kubectl -n $STAGING_NAMESPACE apply -f order-db.yaml
          kubectl -n $STAGING_NAMESPACE apply -f customer-db.yaml
          kubectl -n $STAGING_NAMESPACE apply -f product-service.yaml
          kubectl -n $STAGING_NAMESPACE apply -f order-service.yaml
          kubectl -n $STAGING_NAMESPACE apply -f customer-service.yaml

      - name: Override images to use testing-latest
        run: |
          kubectl -n $STAGING_NAMESPACE set image deployment/product-service-w10-aks \
            product-service-container=$REGISTRY/product_service:testing-latest
          kubectl -n $STAGING_NAMESPACE set image deployment/order-service-w10-aks \
            order-service-container=$REGISTRY/order_service:testing-latest
          kubectl -n $STAGING_NAMESPACE set image deployment/customer-service-w10-aks \
            customer-service-container=$REGISTRY/customer_service:testing-latest

      - name: Wait for rollouts
        run: |
          kubectl -n $STAGING_NAMESPACE rollout status deployment/product-service-w10-aks --timeout=180s
          kubectl -n $STAGING_NAMESPACE rollout status deployment/order-service-w10-aks --timeout=180s
          kubectl -n $STAGING_NAMESPACE rollout status deployment/customer-service-w10-aks --timeout=180s

      - name: Acceptance checks (/health)
        run: |
          set -e
          # Port-forward services and probe /health endpoints
          kubectl -n $STAGING_NAMESPACE port-forward svc/product-service-w10-aks 18000:8000 >/dev/null 2>&1 &
          PFPID1=$!
          kubectl -n $STAGING_NAMESPACE port-forward svc/order-service-w10-aks 18001:8000 >/dev/null 2>&1 &
          PFPID2=$!
          kubectl -n $STAGING_NAMESPACE port-forward svc/customer-service-w10-aks 18002:8000 >/dev/null 2>&1 &
          PFPID3=$!
          # give port-forwards time to bind
          sleep 5
          curl -sf http://127.0.0.1:18000/health | cat
          curl -sf http://127.0.0.1:18001/health | cat
          curl -sf http://127.0.0.1:18002/health | cat
          # cleanup port-forward background jobs
          kill $PFPID1 $PFPID2 $PFPID3 || true

      - name: Basic smoke (pods up)
        run: |
          kubectl -n $STAGING_NAMESPACE get pods
          kubectl -n $STAGING_NAMESPACE get svc

      - name: Destroy staging environment
        if: always()
        run: |
          kubectl delete ns $STAGING_NAMESPACE --wait=false