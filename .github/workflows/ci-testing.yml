name: CI - Stage 1 (testing branch): test then build & push images
on:
  push:
    branches: [ "testing" ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test_backends:
    name: Test backends
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Wait for Postgres and create databases
        env:
          PGPASSWORD: postgres
        run: |
          sudo apt-get update -y && sudo apt-get install -y postgresql-client | cat
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break || sleep 2
          done
          createdb -h localhost -p 5432 -U postgres customers || true
          createdb -h localhost -p 5432 -U postgres orders || true
          createdb -h localhost -p 5432 -U postgres products || true

      - name: Install dependencies (shared)
        run: |
          python -m pip install --upgrade pip
          pip install pytest httpx

      - name: Test customer_service
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pip install -r requirements-dev.txt
          pytest -q

  build_and_push_images:
    name: Build and push images to ACR
    runs-on: ubuntu-latest
    needs: test_backends
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: Build backend images
        run: |
          docker build -t $REGISTRY/customer_service:${IMAGE_TAG} ./backend/customer_service
          docker build -t $REGISTRY/order_service:${IMAGE_TAG}    ./backend/order_service
          docker build -t $REGISTRY/product_service:${IMAGE_TAG}  ./backend/product_service

      - name: Build frontend image
        run: |
          docker build -t $REGISTRY/frontend:${IMAGE_TAG} ./frontend

      - name: Push images
        run: |
          for img in customer_service order_service product_service frontend; do
            docker push $REGISTRY/$img:${IMAGE_TAG}
          done

      - name: Also tag as testing-latest
        run: |
          for img in customer_service order_service product_service frontend; do
            docker tag $REGISTRY/$img:${IMAGE_TAG} $REGISTRY/$img:testing-latest
            docker push $REGISTRY/$img:testing-latest
          done
