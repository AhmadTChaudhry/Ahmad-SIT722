name: CI (testing branch)
on:
  push:
    branches: [ "testing" ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 5s 
          --health-timeout 5s 
          --health-retries 20
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Wait for Postgres and create databases
        env:
          PGPASSWORD: postgres
        run: |
          sudo apt-get update -y && sudo apt-get install -y postgresql-client | cat
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break || sleep 2
          done
          createdb -h localhost -p 5432 -U postgres customers || true
          createdb -h localhost -p 5432 -U postgres orders || true
          createdb -h localhost -p 5432 -U postgres products || true

      - name: Install test deps and run tests (customer)
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      - name: Install test deps and run tests (order)
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      - name: Install test deps and run tests (product)
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: "5432"
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pip install -r requirements-dev.txt
          pytest -q

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: Build and push images
        run: |
          docker build -t $REGISTRY/customer_service:${IMAGE_TAG} -f backend/customer_service/Dockerfile .
          docker build -t $REGISTRY/order_service:${IMAGE_TAG}    -f backend/order_service/Dockerfile .
          docker build -t $REGISTRY/product_service:${IMAGE_TAG}  -f backend/product_service/Dockerfile .
          docker push $REGISTRY/customer_service:${IMAGE_TAG}
          docker push $REGISTRY/order_service:${IMAGE_TAG}
          docker push $REGISTRY/product_service:${IMAGE_TAG}

      - name: Also tag as testing-latest
        run: |
          for img in customer_service order_service product_service; do
            docker tag $REGISTRY/$img:${IMAGE_TAG} $REGISTRY/$img:testing-latest
            docker push $REGISTRY/$img:testing-latest
          done
